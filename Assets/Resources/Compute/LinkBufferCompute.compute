// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel KernelLinkDeepShadowMap

#include "../Include/DeepShadowMap.cginc"
//StructuredBuffer<HeaderNode> HeaderList;
StructuredBuffer<DoublyLinkedNode> DoublyLinkedList;
RWStructuredBuffer<NeighborsNode> NeighborsList;


[numthreads(8,8,1)]
void KernelLinkDeepShadowMap(uint3 id : SV_DispatchThreadID)
{
	if (id.y > Dimension - 1 || id.x > Dimension - 1)
	{
		return;
	}

    int offset = (id.y * Dimension + id.x) * NUM_BUF_ELEMENTS;
	if (DoublyLinkedList[offset].headOrTail == -1)
	{
		return;
	}
	// Center
	int currentCenter = offset;
	int currentNeighbor;
    DoublyLinkedNode currentEntryNeighbor;
	// Right x + 1
	if (id.x != Dimension - 1)
	{
		currentNeighbor = offset + NUM_BUF_ELEMENTS;
        currentEntryNeighbor = DoublyLinkedList[currentNeighbor];
        if (currentEntryNeighbor.headOrTail == -1)
        {
            currentNeighbor = -1;
        }
	}
	else
	{
		currentNeighbor = -1;
	}
	// Top y + 1
	if (currentNeighbor == -1 && id.y != Dimension - 1)
	{
		currentNeighbor = offset + NUM_BUF_ELEMENTS * Dimension;
        currentEntryNeighbor = DoublyLinkedList[currentNeighbor];
        if (currentEntryNeighbor.headOrTail == -1)
        {
            currentNeighbor = -1;
        }
	}
	int i;
	if (currentNeighbor == -1)
	{
		return;
	}

	DoublyLinkedNode tempListEntry;
    
	float depth;
	int j;
	for (i = 0; i < NUM_BUF_ELEMENTS; i++)
	{
		depth = DoublyLinkedList[currentCenter].depth;
		// Search Right
		for (j = 1; j < NUM_BUF_ELEMENTS; j++)
		{
			if (currentNeighbor == -1 || currentEntryNeighbor.headOrTail == -1)
			{
				//currentNeighbor = -1;
				break;
			}
			tempListEntry = DoublyLinkedList[currentNeighbor + 1];

            if(depth < tempListEntry.depth)
				break;
			currentNeighbor++;
			currentEntryNeighbor = tempListEntry;
		}
        if (j == NUM_BUF_ELEMENTS)
        {
            currentNeighbor = -1;
        }
		
		NeighborsList[currentCenter].neighbor = currentNeighbor;
		
		// Next
		currentCenter++;
		if(DoublyLinkedList[currentCenter].headOrTail == -1)
			break;
	}
}