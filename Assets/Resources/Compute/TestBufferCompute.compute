// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel KernelResetTestResult
#pragma kernel KernelTestNumberBuffer
#pragma kernel KernelTestDepthBuffer
#pragma kernel KernelTestRegressionBuffer

#include "../Include/DeepShadowMap.cginc"

StructuredBuffer<int> NumberBuffer;
StructuredBuffer<float> DepthBuffer;
StructuredBuffer<FittingFunc> RegressionBuffer;
RWTexture2D<float4> TestRenderTexture;
int TestIndex;

[numthreads(8,8,1)]
void KernelResetTestResult(uint3 id : SV_DispatchThreadID)
{
	TestRenderTexture[id.xy] = float4(0,0,0,1);
}

[numthreads(8,8,1)]
void KernelTestNumberBuffer(uint3 id : SV_DispatchThreadID)
{
    int start = NumberBuffer[id.y * Dimension + id.x];
    if (start <= TestIndex)
    {
		TestRenderTexture[id.xy] = float4(0,0,0,1);
    }
    else
    {
		TestRenderTexture[id.xy] = float4(1,0,0,1);
    }
}

[numthreads(8,8,1)]
void KernelTestDepthBuffer(uint3 id : SV_DispatchThreadID)
{
    float depth = DepthBuffer[(id.y * Dimension + id.x) * NUM_BUF_ELEMENTS + TestIndex];
	TestRenderTexture[id.xy] = float4(depth, 0, 0, 1);
}

[numthreads(8, 8, 1)]
void KernelTestRegressionBuffer(uint3 id : SV_DispatchThreadID)
{
	FittingFunc func = RegressionBuffer[id.y * Dimension + id.x];
	float3 f = func.f[(uint)TestIndex % 4];
	TestRenderTexture[id.xy] = float4((f.xy), abs(f.y)-f.y, 1);
}